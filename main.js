// Generated by CoffeeScript 1.6.2
(function() {
  var ASSETS, BEAR_IMG, ComboLabel, CountLabel, Message, MessageType, NicoLabel, StreamMessage, TimerLabel, add, game, life, padding, rand, remove, timer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  BEAR_IMG = 'chara1.png';

  ASSETS = [];

  game = null;

  timer = null;

  life = null;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  rand = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    min = Math.floor(min);
    max = Math.floor(max);
    return min + Math.floor(Math.random() * max) % (max - min);
  };

  add = function(inst) {
    return game.currentScene.addChild(inst);
  };

  remove = function(inst) {
    return game.currentScene.removeChild(inst);
  };

  padding = function(num) {
    return ('00' + num).substr(-2);
  };

  NicoLabel = (function(_super) {
    __extends(NicoLabel, _super);

    function NicoLabel(x, y, color, fontSize) {
      if (color == null) {
        color = '#ffffff';
      }
      if (fontSize == null) {
        fontSize = 20;
      }
      NicoLabel.__super__.constructor.apply(this, arguments);
      this.x = x;
      this.y = y;
      this.color = color;
      this.font = "bold " + fontSize + "px Arial";
      add(this);
    }

    return NicoLabel;

  })(Label);

  CountLabel = (function(_super) {
    __extends(CountLabel, _super);

    function CountLabel(x, y) {
      CountLabel.__super__.constructor.call(this, x, y);
      this._count = 0;
      this.label = '';
    }

    CountLabel.property('count', {
      get: function() {
        return this._count;
      },
      set: function(c) {
        this._count = c;
        return this.text = "" + this.label + this._count;
      }
    });

    return CountLabel;

  })(NicoLabel);

  ComboLabel = (function(_super) {
    var comboNum, lastComboFrame;

    __extends(ComboLabel, _super);

    comboNum = 0;

    lastComboFrame = 0;

    function ComboLabel(x, y) {
      ComboLabel.__super__.constructor.call(this, x, y, '#fff100');
      if (game.frame - lastComboFrame > game.fps) {
        comboNum = 0;
      }
      comboNum++;
      this.text = "Combo " + comboNum;
      timer.addTime(comboNum * 10);
      lastComboFrame = game.frame;
      this.MAX_AGE = 30;
    }

    ComboLabel.prototype.onenterframe = function() {
      this.y -= 1;
      this.opacity = 1.0 - (this.age / this.MAX_AGE);
      if (this.age > this.MAX_AGE) {
        return remove(this);
      }
    };

    return ComboLabel;

  })(NicoLabel);

  TimerLabel = (function(_super) {
    __extends(TimerLabel, _super);

    function TimerLabel(x, y) {
      TimerLabel.__super__.constructor.call(this, x, y);
      this.count = 0;
      this.update();
    }

    TimerLabel.prototype.update = function() {
      return this.text = this.getTime();
    };

    TimerLabel.prototype.onenterframe = function() {
      if (game.frame % game.fps === 0) {
        this.count++;
        return this.update();
      }
    };

    TimerLabel.prototype.addTime = function(time) {
      this.count += time;
      if (this.count < 0) {
        this.count = 0;
      }
      return this.update();
    };

    TimerLabel.prototype.getTime = function() {
      return "" + (padding(Math.floor(this.count / 60))) + ":" + (padding(this.count % 60));
    };

    return TimerLabel;

  })(NicoLabel);

  MessageType = {
    Normal: {
      color: '#ffffff',
      ontouch: function() {
        return timer.addTime(-10);
      }
    },
    Illegal: {
      color: '#ff0000',
      ontouch: function(msg) {
        return new ComboLabel(msg.x, msg.y);
      },
      onleave: function() {
        return life.count -= 1;
      }
    }
  };

  Message = (function(_super) {
    __extends(Message, _super);

    function Message(x, y, text, msgType) {
      this.msgType = msgType;
      Message.__super__.constructor.call(this, x, y, this.msgType.color, 40);
      this.text = text;
      this.width = 500;
    }

    Message.prototype.ontouchstart = function(e) {
      var _base;

      if (typeof (_base = this.msgType).ontouch === "function") {
        _base.ontouch(this);
      }
      return remove(this);
    };

    Message.prototype.leave = function() {
      var _base;

      if (typeof (_base = this.msgType).onleave === "function") {
        _base.onleave(this);
      }
      return remove(this);
    };

    return Message;

  })(NicoLabel);

  StreamMessage = (function(_super) {
    __extends(StreamMessage, _super);

    function StreamMessage(text, msgType) {
      StreamMessage.__super__.constructor.call(this, game.width, 0, text, msgType);
      this.vx = -rand(2, 10);
      this.y = rand(game.height - 50);
    }

    StreamMessage.prototype.onenterframe = function() {
      this.x += this.vx;
      if (this.x + this.width < 0) {
        return this.leave();
      }
    };

    return StreamMessage;

  })(Message);

  window.onload = function() {
    game = new Game(500, 400);
    game.fps = 30;
    game.preload(ASSETS);
    game.onload = function() {
      var scene;

      scene = game.rootScene;
      scene.backgroundColor = '#0f0f0f';
      timer = new TimerLabel(0, 0);
      life = new CountLabel(100, 0);
      life.label = 'Life : ';
      life.count = 1;
      return scene.onenterframe = function() {
        var i, _i;

        if (game.frame % game.fps === 0) {
          for (i = _i = 1; _i <= 5; i = ++_i) {
            if (rand(10) === 0) {
              new StreamMessage('mmmmmmmmmmmm', MessageType.Illegal);
            } else {
              new StreamMessage('wwwwwwwwwwww', MessageType.Normal);
            }
          }
        }
        if (life.count === 0) {
          return alert("ゲームオーバー\n再生時間 " + (timer.getTime()));
        }
      };
    };
    return game.start();
  };

}).call(this);
