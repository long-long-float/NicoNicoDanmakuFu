// Generated by CoffeeScript 1.6.2
(function() {
  var ASSETS, BEAR_IMG, CountLabel, Message, MessageType, StreamMessage, TimerLabel, add, game, life, padding, rand, remove, timer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  enchant();

  BEAR_IMG = 'chara1.png';

  ASSETS = [];

  game = null;

  timer = null;

  life = null;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  rand = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    min = Math.floor(min);
    max = Math.floor(max);
    return min + Math.floor(Math.random() * max) % (max - min);
  };

  add = function(inst) {
    return game.currentScene.addChild(inst);
  };

  remove = function(inst) {
    return game.currentScene.removeChild(inst);
  };

  padding = function(num) {
    return ('00' + num).substr(-2);
  };

  CountLabel = (function(_super) {
    __extends(CountLabel, _super);

    function CountLabel(x, y) {
      CountLabel.__super__.constructor.apply(this, arguments);
      this.x = x;
      this.y = y;
      this.color = '#ffffff';
      this.font = 'bold 20px Arial';
      this._count = 0;
      this.label = '';
    }

    CountLabel.property('count', {
      get: function() {
        return this._count;
      },
      set: function(c) {
        this._count = c;
        return this.text = "" + this.label + this._count;
      }
    });

    return CountLabel;

  })(Label);

  TimerLabel = (function(_super) {
    __extends(TimerLabel, _super);

    function TimerLabel(x, y) {
      TimerLabel.__super__.constructor.apply(this, arguments);
      this.x = x;
      this.y = y;
      this.color = '#ffffff';
      this.font = 'bold 20px Arial';
      this.count = 0;
      this.update();
    }

    TimerLabel.prototype.update = function() {
      return this.text = "" + (padding(Math.floor(this.count / 60))) + ":" + (padding(this.count % 60));
    };

    TimerLabel.prototype.onenterframe = function() {
      if (game.frame % game.fps === 0) {
        this.count++;
        return this.update();
      }
    };

    TimerLabel.prototype.addTime = function(time) {
      this.count += time;
      if (this.count < 0) {
        this.count = 0;
      }
      return this.update();
    };

    return TimerLabel;

  })(Label);

  MessageType = {
    Normal: {
      color: '#ffffff',
      ontouch: function() {
        return timer.addTime(-10);
      }
    },
    Illegal: {
      color: '#ff0000',
      onleave: function() {
        return life.count -= 1;
      }
    }
  };

  Message = (function(_super) {
    __extends(Message, _super);

    function Message(x, y, text, msg_type) {
      this.msg_type = msg_type;
      Message.__super__.constructor.call(this, text);
      this.x = x;
      this.y = y;
      this.color = this.msg_type.color;
      this.font = 'bold 40px Arial';
      this.width = 500;
      add(this);
    }

    Message.prototype.ontouchstart = function(e) {
      var _base;

      if (typeof (_base = this.msg_type).ontouch === "function") {
        _base.ontouch(this);
      }
      return remove(this);
    };

    Message.prototype.leave = function() {
      var _base;

      if (typeof (_base = this.msg_type).onleave === "function") {
        _base.onleave(this);
      }
      return remove(this);
    };

    return Message;

  })(Label);

  StreamMessage = (function(_super) {
    __extends(StreamMessage, _super);

    function StreamMessage(text, msg_type) {
      StreamMessage.__super__.constructor.call(this, game.width, 0, text, msg_type);
      this.vx = -rand(2, 10);
      this.y = rand(game.height - 50);
    }

    StreamMessage.prototype.onenterframe = function() {
      this.x += this.vx;
      if (this.x + this.width < 0) {
        return this.leave();
      }
    };

    return StreamMessage;

  })(Message);

  window.onload = function() {
    game = new Game(500, 400);
    game.fps = 30;
    game.preload(ASSETS);
    game.onload = function() {
      var scene;

      scene = game.rootScene;
      scene.backgroundColor = '#0f0f0f';
      scene.addChild(timer = new TimerLabel(0, 0));
      life = new CountLabel(100, 0);
      life.label = 'Life : ';
      life.count = 10;
      scene.addChild(life);
      return scene.onenterframe = function() {
        var i, _i, _results;

        if (game.frame % game.fps === 0) {
          _results = [];
          for (i = _i = 1; _i <= 5; i = ++_i) {
            if (rand(10) === 0) {
              _results.push(new StreamMessage('mmmmmmmmmmmm', MessageType.Illegal));
            } else {
              _results.push(new StreamMessage('wwwwwwwwwwww', MessageType.Normal));
            }
          }
          return _results;
        }
      };
    };
    return game.start();
  };

}).call(this);
